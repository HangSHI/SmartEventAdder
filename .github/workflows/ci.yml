name: Enhanced CI/CD Pipeline - Tests, Security & API Health

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: read

jobs:
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret detection

    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run TruffleHog Secret Scanner
      run: |
        echo "🔍 Running TruffleHog comprehensive secret detection..."
        trufflehog filesystem . --json --only-verified=false > trufflehog-report.json || true
        if [ -f trufflehog-report.json ] && [ -s trufflehog-report.json ]; then
          echo "🚨 Secrets detected by TruffleHog!"
          echo "Number of findings: $(wc -l < trufflehog-report.json)"
          echo "Sample findings:"
          head -5 trufflehog-report.json | jq -r '.DetectorName + " in " + .SourceMetadata.Data.Filesystem.file + ":" + (.SourceMetadata.Data.Filesystem.line|tostring)' 2>/dev/null || head -5 trufflehog-report.json
        else
          echo "✅ No secrets detected by TruffleHog"
        fi

    - name: Set up Python for Security Tools
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install safety
        pip install -r requirements.txt

    - name: Run Safety Vulnerability Scanner
      run: |
        echo "🛡️ Checking for known vulnerabilities in Python dependencies..."
        safety scan --json --output safety-report.json || true
        safety scan --short-report || true
      continue-on-error: true

    - name: Security Scan Summary
      if: always()
      run: |
        echo "🔍 Streamlined Security Scan Summary"
        echo "==================================="

        TRUFFLEHOG_FINDINGS=0
        SAFETY_ISSUES=0

        # Check TruffleHog findings
        if [ -f trufflehog-report.json ] && [ -s trufflehog-report.json ]; then
          TRUFFLEHOG_FINDINGS=$(wc -l < trufflehog-report.json)
          echo "🚨 TruffleHog: $TRUFFLEHOG_FINDINGS potential secrets detected"
        else
          echo "✅ TruffleHog: No secrets detected"
        fi

        # Check Safety findings
        if [ -f safety-report.json ] && [ -s safety-report.json ]; then
          SAFETY_ISSUES=$(jq length safety-report.json 2>/dev/null || echo "unknown")
          echo "🚨 Safety: $SAFETY_ISSUES dependency vulnerabilities found"
        else
          echo "✅ Safety: No dependency vulnerabilities"
        fi

        echo ""
        echo "📊 Security Tools Summary:"
        echo "  🔍 TruffleHog (secrets): $TRUFFLEHOG_FINDINGS findings"
        echo "  🛡️  Safety (dependencies): $SAFETY_ISSUES vulnerabilities"

        if [ $TRUFFLEHOG_FINDINGS -gt 0 ]; then
          echo ""
          echo "⚠️  SECURITY ALERT: Potential secrets detected!"
          echo "📋 Review security reports and remove any real credentials"
          echo "🔧 For testing: Not failing build, but production should fail"
          # Uncomment to fail on secret detection: exit 1
        fi

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          trufflehog-report.json
          safety-report.json
        retention-days: 30

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan  # Run after security scan
    strategy:
      matrix:
        python-version: ['3.11']  # Focus on current Python LTS version

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-timeout pytest-cov pytest-xvfb

    - name: Run Unit Tests with Coverage
      run: |
        python run_tests.py ci
      env:
        PYTHONPATH: ${{ github.workspace }}
        CI: true

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
      continue-on-error: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml
        retention-days: 30

  api-health-check:
    name: 🌐 Production API Health Check
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install HTTP client
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Test Production API Health
      run: |
        echo "🏥 Testing Production API Health Status..."
        python -c "
        import requests
        import sys
        import json
        from datetime import datetime

        # Production API endpoint
        base_url = 'https://smarteventadder-api-6qqmniwadq-an.a.run.app'

        def test_endpoint(url, description):
            try:
                print(f'Testing {description}: {url}')
                response = requests.get(url, timeout=30)
                print(f'Status: {response.status_code}')
                if response.status_code == 200:
                    try:
                        data = response.json()
                        print(f'Response: {json.dumps(data, indent=2)}')
                        return True
                    except:
                        print(f'Response: {response.text[:200]}...')
                        return True
                else:
                    print(f'Error: {response.text}')
                    return False
            except Exception as e:
                print(f'Failed: {str(e)}')
                return False

        print('=' * 60)
        print(f'🚀 SmartEventAdder API Health Check')
        print(f'⏰ Timestamp: {datetime.now().isoformat()}')
        print('=' * 60)

        results = []

        # Test root endpoint
        results.append(test_endpoint(f'{base_url}/', 'Root endpoint'))
        print()

        # Test health endpoint
        results.append(test_endpoint(f'{base_url}/api/health', 'Health check'))
        print()

        # Test config endpoint
        results.append(test_endpoint(f'{base_url}/api/config', 'Configuration'))
        print()

        # Test docs endpoint (should return HTML)
        try:
            print(f'Testing API Documentation: {base_url}/docs')
            response = requests.get(f'{base_url}/docs', timeout=30)
            print(f'Docs Status: {response.status_code}')
            results.append(response.status_code == 200)
        except Exception as e:
            print(f'Docs Failed: {str(e)}')
            results.append(False)

        print()
        print('=' * 60)
        passed = sum(results)
        total = len(results)
        print(f'✅ Health Check Results: {passed}/{total} endpoints healthy')

        if passed == total:
            print('🎉 All API endpoints are healthy!')
            sys.exit(0)
        else:
            print('⚠️  Some API endpoints may have issues')
            print('💡 This may be normal for development/staging environments')
            sys.exit(0)  # Don't fail CI for API issues
        "

    - name: Create API Health Report
      if: always()
      run: |
        echo "# API Health Check Report" > api-health-report.md
        echo "**Timestamp:** $(date)" >> api-health-report.md
        echo "**Production API:** https://smarteventadder-api-6qqmniwadq-an.a.run.app" >> api-health-report.md
        echo "" >> api-health-report.md
        echo "See job logs for detailed health check results." >> api-health-report.md

    - name: Upload API Health Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-health-report
        path: api-health-report.md
        retention-days: 7

  summary:
    name: 📋 CI/CD Summary
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests, api-health-check]
    if: always()

    steps:
    - name: CI/CD Pipeline Summary
      run: |
        echo "=========================================================="
        echo "🤖 SmartEventAdder AI Agent - CI/CD Pipeline Complete"
        echo "=========================================================="
        echo ""
        echo "🔒 Security Scan: ${{ needs.security-scan.result }}"
        echo "🧪 Unit Tests: ${{ needs.unit-tests.result }}"
        echo "🌐 API Health Check: ${{ needs.api-health-check.result }}"
        echo ""
        echo "📊 Streamlined Pipeline Features:"
        echo "  ✅ TruffleHog comprehensive secret detection"
        echo "  ✅ Safety dependency vulnerability scanning"
        echo "  ✅ Unit tests with coverage reporting"
        echo "  ✅ Production API health monitoring"
        echo ""
        echo "🚀 Production API: https://smarteventadder-api-6qqmniwadq-an.a.run.app"
        echo "📚 API Docs: https://smarteventadder-api-6qqmniwadq-an.a.run.app/docs"
        echo ""
        echo "=========================================================="